<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DefaultDataflipJson" xml:space="preserve">
    <value>{
	"contexts" :
	[
		{
			"connectionString" : "ENTER YOUR CONNECTION STRING HERE (REQUIRED)",
			"namespace" : "ENTER THE NAMESPACE FOR THE CONTEXT (REQUIRED)",
			"name" : "ENTER THE NAME OF THE CONTEXT CLASS (REQUIRED)",
			"output" : "ENTER THE FILENAME TO WRITE THE CONTEXT CLASSES, RELATIVE PATHS ARE ALLOWED",
			"sprocs" : 
				[
					/* Example 1. A sproc that returns data in multiple columns.*/
					{
						/*[OPTIONAL] Creates a ///&lt;summary&gt; section over the method with a comment.*/
						"comments" : "This gets all the records in my sproc",
						
						/*[OPTIONAL] The name for the method, if omitted the sproc name is used.*/
						"method" : "MyMethodThatCallsTheSproc",
						
						/*[REQUIRED] The sproc name.*/
						"name" : "MySproc",
						
						/*
						[OPTIONAL] If the sproc returns a query with results, the following parameters will be used to test the sproc
						and get metadata information about the columns. In the current example Dataflip will execute the following statement
						against SQL Server:
						"SET ROWCOUNT 0; EXEC MySproc @MyParam1='Hello', @MyParam2=0, @MyParam3='FALSE'"
						The "SET ROWCOUNT 0" is run to make sure that no data is affected, Dataflip doesn't need any rows to extract the
						metadata information, all it needs is an open and valid SqlDataReader, so feel free to define values that return little or just
						no data.
						
						If all parameters in the sproc are optional and you still want to get the sproc results in an array of strongly-typed objects
						you can add a "testParams" element set to an empty array but keep in mind that the sproc will still be tested also don't remove
						the element itself since removing it means the sproc doesn't need any testing and therefore no class to hold the results 
						will be created, see the next example that explains how to create a method that returns Int32 with the number of affected records.
						*/
						"testParams" : [
							{ "@MyParam1" : "Hello : text" },
							{ "@MyParam2" : "0 : int" },
							{ "@MyParam3" : "false : bool" }
						]
					},
					
					/* Example 2. A sproc that returns Int32 with the number of affected records.*/
					{
						"name" : "ap_ActionHistory_Retrieve",
						
						/* Uses a different name for the method. */
            "method": "RetrieveActionHistory"

            /* Notice how 'testParams' isn't passed this time, this means the sproc requires no testing and no column information
              will be retrieved from the resultset. */
					},
					
					/* Example 3. A sproc that returns a scalar value.*/
					{
						"name" : "ap_ActionHistory_Retrieve",
						"method" : "RetrieveActionHistory2",
						
						/* [OPTIONAL] Sets the name of the type that should be returned by the method. */
						"return" : "string"
					}
				]
		}
	]
}</value>
  </data>
</root>